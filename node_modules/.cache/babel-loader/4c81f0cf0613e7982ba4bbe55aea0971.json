{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\PAF\\\\Text Manager\\\\Project\\\\text-manager-front-end\\\\src\\\\components\\\\PostMessages.js\";\nimport React, { useEffect, useState, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport { Grid, Paper, withStyles, List, ListItem, ListItemText, Typography, Divider, Button } from \"@material-ui/core\";\nimport PostMessageForm from \"./PostMessageForm\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { DeleteSweep } from \"@material-ui/icons\";\n\nconst styles = theme => ({\n  paper: {\n    margin: theme.spacing(3),\n    padding: theme.spacing(2)\n  },\n  smMargin: {\n    margin: theme.spacing(1)\n  },\n  actionDiv: {\n    textAlign: \"center\"\n  }\n});\n\nconst PostMessages = ({\n  classes,\n  ...props\n}) => {\n  //const {classes, ...props} = props\n  const [currentId, setCurrentId] = useState(0);\n  useEffect(() => {\n    props.fetchAllPostMessages();\n  }, []); //DidMount\n\n  const onDelete = id => {\n    const onSuccess = () => {\n      ButterToast.raise({\n        content: /*#__PURE__*/React.createElement(Cinnamon.Crisp, {\n          title: \"Post Box\",\n          content: \"Deleted successfully\",\n          scheme: Cinnamon.Crisp.SCHEME_PURPLE,\n          icon: /*#__PURE__*/React.createElement(DeleteSweep, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 12\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 14\n          }\n        })\n      });\n    };\n\n    if (window.confirm('Are you sure to delete this record?')) props.deletePostMessage(id, onSuccess);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PostMessageForm, Object.assign({\n    currentId,\n    setCurrentId\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }\n  }, props.postMessageList.map((record, index) => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, record.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, record.message), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.actionDiv,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"small\",\n      className: classes.smMargin,\n      onClick: () => setCurrentId(record._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      size: \"small\",\n      className: classes.smMargin,\n      onClick: () => onDelete(record._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }\n    }, \"Delete\")))), /*#__PURE__*/React.createElement(Divider, {\n      component: \"li\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }));\n  })))));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  fetchAllPostMessages: actions.fetchAll,\n  deletePostMessage: actions.Delete\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessages));","map":{"version":3,"sources":["D:/Projects/PAF/Text Manager/Project/text-manager-front-end/src/components/PostMessages.js"],"names":["React","useEffect","useState","Fragment","connect","actions","Grid","Paper","withStyles","List","ListItem","ListItemText","Typography","Divider","Button","PostMessageForm","ButterToast","Cinnamon","DeleteSweep","styles","theme","paper","margin","spacing","padding","smMargin","actionDiv","textAlign","PostMessages","classes","props","currentId","setCurrentId","fetchAllPostMessages","onDelete","id","onSuccess","raise","content","Crisp","SCHEME_PURPLE","window","confirm","deletePostMessage","postMessageList","map","record","index","title","message","_id","mapStateToProps","state","postMessage","list","mapActionToProps","fetchAll","Delete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\nimport { Grid, Paper, withStyles, List, ListItem, ListItemText, Typography, Divider, Button } from \"@material-ui/core\";\r\nimport PostMessageForm from \"./PostMessageForm\";\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { DeleteSweep } from \"@material-ui/icons\";\r\n\r\nconst styles = theme => ({\r\n paper: {\r\n  margin: theme.spacing(3),\r\n  padding: theme.spacing(2)\r\n },\r\n smMargin: {\r\n  margin: theme.spacing(1)\r\n },\r\n actionDiv: {\r\n  textAlign: \"center\"\r\n }\r\n})\r\n\r\nconst PostMessages = ({ classes, ...props }) => {\r\n //const {classes, ...props} = props\r\n const [currentId, setCurrentId] = useState(0)\r\n\r\n useEffect(() => {\r\n  props.fetchAllPostMessages()\r\n }, [])//DidMount\r\n\r\n const onDelete = id => {\r\n  const onSuccess = () => {\r\n   ButterToast.raise({\r\n    content: <Cinnamon.Crisp title=\"Post Box\"\r\n     content=\"Deleted successfully\"\r\n     scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n     icon={<DeleteSweep />}\r\n    />\r\n   })\r\n  }\r\n  if (window.confirm('Are you sure to delete this record?'))\r\n   props.deletePostMessage(id, onSuccess)\r\n }\r\n\r\n\r\n return (\r\n  <Grid container>\r\n   <Grid item xs={5}>\r\n    <Paper className={classes.paper}>\r\n     <PostMessageForm {...{ currentId, setCurrentId }} />\r\n    </Paper>\r\n   </Grid>\r\n   <Grid item xs={7}>\r\n    <Paper className={classes.paper}>\r\n     <List>\r\n      {\r\n       props.postMessageList.map((record, index) => {\r\n        return (\r\n         <Fragment key={index}>\r\n          <ListItem>\r\n           <ListItemText>\r\n            <Typography variant=\"h5\">\r\n             {record.title}\r\n            </Typography>\r\n            <div>\r\n             {record.message}\r\n            </div>\r\n            <div className={classes.actionDiv}>\r\n             <Button variant=\"contained\" color=\"primary\" size=\"small\"\r\n              className={classes.smMargin}\r\n              onClick={() => setCurrentId(record._id)}>\r\n              Edit\r\n                                                    </Button>\r\n             <Button variant=\"contained\" color=\"secondary\" size=\"small\"\r\n              className={classes.smMargin}\r\n              onClick={() => onDelete(record._id)}>\r\n              Delete\r\n                                                    </Button>\r\n            </div>\r\n           </ListItemText>\r\n          </ListItem>\r\n          <Divider component=\"li\" />\r\n         </Fragment>\r\n        )\r\n       })\r\n      }\r\n     </List>\r\n    </Paper>\r\n   </Grid>\r\n  </Grid>\r\n );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n fetchAllPostMessages: actions.fetchAll,\r\n deletePostMessage: actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessages));"]},"metadata":{},"sourceType":"module"}