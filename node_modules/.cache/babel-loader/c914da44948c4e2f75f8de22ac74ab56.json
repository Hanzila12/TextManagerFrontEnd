{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\PAF\\\\Text Manager\\\\Project\\\\text-manager-front-end\\\\src\\\\components\\\\PostMessageForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nconst initialFieldValue = {\n  title: '',\n  message: ''\n};\n\nconst styles = theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  },\n  postBtn: {\n    width: \"50%\"\n  }\n}); //This is a Component PostMessageForm\n\n\nconst PostMessageForm = ({\n  classes,\n  ...props\n}) => {\n  const validate = () => {\n    let temp = { ...errors\n    };\n    temp.title = values.title ? \"\" : \"This Field is required\";\n    temp.message = values.message ? \"\" : \"This Field is required\";\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x == \"\");\n  };\n\n  var {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange\n  } = useForm(initialFieldValue);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate()) {\n      window.alert('Validation Succeeded');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Title\",\n    fullWidth: true,\n    value: values.title,\n    onChange: handleInputChange\n  }, errors.title && {\n    error: true,\n    helperText: errors.title\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }\n  })), /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    value: values.message,\n    multiline: true,\n    rows: 4,\n    onChange: handleInputChange\n  }, errors.message && {\n    error: true,\n    helperText: errors.message\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    className: classes.postBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }\n  }, \"Submit\"));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  fetchAllPostMessages: actions.create\n};\nexport default connect()(withStyles(styles)(PostMessageForm));","map":{"version":3,"sources":["D:/Projects/PAF/Text Manager/Project/text-manager-front-end/src/components/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","initialFieldValue","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","PostMessageForm","classes","props","validate","temp","errors","values","setErrors","Object","every","x","setValues","handleInputChange","handleSubmit","e","preventDefault","window","alert","error","helperText","mapStateToProps","state","postMessageList","postMessage","list","mapActionToProps","fetchAllPostMessages","actions","create"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst initialFieldValue = {\r\n title: '',\r\n message: ''\r\n}\r\n\r\nconst styles = theme => ({\r\n root: {\r\n  '& .MuiTextField-root': {\r\n   margin: theme.spacing(1)\r\n  },\r\n },\r\n form: {\r\n  display: 'flex',\r\n  flexWrap: 'wrap',\r\n  justifyContent: 'center'\r\n },\r\n postBtn: {\r\n  width: \"50%\"\r\n }\r\n})\r\n\r\n\r\n\r\n//This is a Component PostMessageForm\r\nconst PostMessageForm = ({ classes, ...props }) => {\r\n\r\n const validate = () => {\r\n  let temp = { ...errors }\r\n  temp.title = values.title ? \"\" : \"This Field is required\"\r\n  temp.message = values.message ? \"\" : \"This Field is required\"\r\n  setErrors({\r\n   ...temp\r\n  })\r\n  return Object.values(temp).every(x => x == \"\")\r\n }\r\n\r\n var { values,\r\n  setValues,\r\n  errors,\r\n  setErrors,\r\n  handleInputChange } = useForm(initialFieldValue)\r\n\r\n const handleSubmit = e => {\r\n  e.preventDefault();\r\n  if (validate()) {\r\n   window.alert('Validation Succeeded')\r\n  }\r\n }\r\n\r\n return (\r\n  <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit} >\r\n   <TextField\r\n    name=\"title\"\r\n    variant=\"outlined\"\r\n    label=\"Title\"\r\n    fullWidth\r\n    value={values.title}\r\n    onChange={handleInputChange}\r\n    {...(errors.title && { error: true, helperText: errors.title })}\r\n   ></TextField>\r\n   <TextField\r\n    name=\"message\"\r\n    variant=\"outlined\"\r\n    label=\"Message\"\r\n    fullWidth\r\n    value={values.message}\r\n    multiline rows={4}\r\n    onChange={handleInputChange}\r\n    {...(errors.message && { error: true, helperText: errors.message })}\r\n   ></TextField>\r\n   <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    size=\"large\"\r\n    type=\"submit\"\r\n    className={classes.postBtn}\r\n   >Submit</Button>\r\n  </form >\r\n );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n fetchAllPostMessages: actions.create\r\n}\r\n\r\nexport default connect()(withStyles(styles)(PostMessageForm));"]},"metadata":{},"sourceType":"module"}