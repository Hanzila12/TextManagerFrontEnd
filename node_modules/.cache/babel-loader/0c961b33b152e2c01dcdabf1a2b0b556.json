{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\PAF\\\\Text Manager\\\\Project\\\\text-manager-front-end\\\\src\\\\components\\\\PostMessageForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\nconst initialFieldValues = {\n  title: '',\n  message: ''\n};\n\nconst styles = theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  },\n  postBtn: {\n    width: \"50%\"\n  }\n});\n\nconst PostMessageForm = ({\n  classes,\n  ...props\n}) => {\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n\n  const validate = () => {\n    let temp = { ...errors\n    };\n    temp.title = values.title ? \"\" : \"This field is required.\";\n    temp.message = values.message ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x == \"\");\n  };\n\n  var {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, props.setCurrentId);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const onSuccess = () => {\n      ButterToast.raise({\n        content: /*#__PURE__*/React.createElement(Cinnamon.Crisp, {\n          title: \"Post Box\",\n          content: \"Submitted successfully\",\n          scheme: Cinnamon.Crisp.SCHEME_PURPLE,\n          icon: /*#__PURE__*/React.createElement(AssignmentTurnedIn, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 12\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 14\n          }\n        })\n      });\n      resetForm();\n    };\n\n    if (validate()) {\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess);else props.updatePostMessage(props.currentId, values, onSuccess);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Title\",\n    fullWidth: true,\n    value: values.title,\n    onChange: handleInputChange\n  }, errors.title && {\n    error: true,\n    helperText: errors.title\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 4\n    }\n  })), /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    value: values.message,\n    onChange: handleInputChange\n  }, errors.message && {\n    error: true,\n    helperText: errors.message\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    className: classes.postBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }\n  }, \"Submit\"));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));","map":{"version":3,"sources":["D:/Projects/PAF/Text Manager/Project/text-manager-front-end/src/components/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","actions","ButterToast","Cinnamon","AssignmentTurnedIn","initialFieldValues","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","PostMessageForm","classes","props","currentId","setValues","postMessageList","find","x","_id","setErrors","validate","temp","errors","values","Object","every","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","onSuccess","raise","content","Crisp","SCHEME_PURPLE","createPostMessage","updatePostMessage","error","helperText","mapStateToProps","state","postMessage","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\r\n\r\nconst initialFieldValues = {\r\n title: '',\r\n message: ''\r\n}\r\n\r\nconst styles = theme => ({\r\n root: {\r\n  '& .MuiTextField-root': {\r\n   margin: theme.spacing(1)\r\n  },\r\n },\r\n form: {\r\n  display: 'flex',\r\n  flexWrap: 'wrap',\r\n  justifyContent: 'center'\r\n },\r\n postBtn: {\r\n  width: \"50%\"\r\n }\r\n})\r\n\r\nconst PostMessageForm = ({ classes, ...props }) => {\r\n\r\n useEffect(() => {\r\n  if (props.currentId != 0) {\r\n   setValues({\r\n    ...props.postMessageList.find(x => x._id == props.currentId)\r\n   })\r\n   setErrors({})\r\n  }\r\n }, [props.currentId])\r\n\r\n const validate = () => {\r\n  let temp = { ...errors }\r\n  temp.title = values.title ? \"\" : \"This field is required.\"\r\n  temp.message = values.message ? \"\" : \"This field is required.\"\r\n  setErrors({\r\n   ...temp\r\n  })\r\n  return Object.values(temp).every(x => x == \"\")\r\n }\r\n\r\n var {\r\n  values,\r\n  setValues,\r\n  errors,\r\n  setErrors,\r\n  handleInputChange,\r\n  resetForm\r\n } = useForm(initialFieldValues, props.setCurrentId)\r\n\r\n const handleSubmit = e => {\r\n  e.preventDefault()\r\n  const onSuccess = () => {\r\n   ButterToast.raise({\r\n    content: <Cinnamon.Crisp title=\"Post Box\"\r\n     content=\"Submitted successfully\"\r\n     scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n     icon={<AssignmentTurnedIn />}\r\n    />\r\n   })\r\n   resetForm()\r\n  }\r\n  if (validate()) {\r\n   if (props.currentId == 0)\r\n    props.createPostMessage(values, onSuccess)\r\n   else\r\n    props.updatePostMessage(props.currentId, values, onSuccess)\r\n  }\r\n }\r\n\r\n return (\r\n  <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`}\r\n   onSubmit={handleSubmit}>\r\n   <TextField\r\n    name=\"title\"\r\n    variant=\"outlined\"\r\n    label=\"Title\"\r\n    fullWidth\r\n    value={values.title}\r\n    onChange={handleInputChange}\r\n    {...(errors.title && { error: true, helperText: errors.title })}\r\n   />\r\n   <TextField\r\n    name=\"message\"\r\n    variant=\"outlined\"\r\n    label=\"Message\"\r\n    fullWidth\r\n    multiline\r\n    rows={4}\r\n    value={values.message}\r\n    onChange={handleInputChange}\r\n    {...(errors.message && { error: true, helperText: errors.message })}\r\n   />\r\n   <Button\r\n    variant=\"contained\"\r\n    color=\"primary\"\r\n    size=\"large\"\r\n    type=\"submit\"\r\n    className={classes.postBtn}\r\n   >Submit</Button>\r\n  </form>\r\n );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n createPostMessage: actions.create,\r\n updatePostMessage: actions.update\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));"]},"metadata":{},"sourceType":"module"}