{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\PAF\\\\Text Manager\\\\Project\\\\text-manager-front-end\\\\src\\\\components\\\\PostMessageForm.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\nimport useForm from \"./useForm\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/postMessage\";\nimport ButterToast, { Cinnamon } from \"butter-toast\";\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\nimport { browserHistory } from \"react-router\";\nconst initialFieldValues = {\n  title: '',\n  message: ''\n};\n\nconst styles = theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1)\n    }\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  },\n  postBtn: {\n    width: \"15%\",\n    marginLeft: theme.spacing(10)\n  }\n});\n\nconst PostMessageForm = ({\n  classes,\n  ...props\n}) => {\n  useEffect(() => {\n    if (props.currentId != 0) {\n      setValues({ ...props.postMessageList.find(x => x._id == props.currentId)\n      });\n      setErrors({});\n    }\n  }, [props.currentId]);\n\n  const validate = () => {\n    let temp = { ...errors\n    };\n    temp.title = values.title ? \"\" : \"This field is required.\";\n    temp.message = values.message ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x == \"\");\n  };\n\n  var {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFieldValues, props.setCurrentId);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const onSuccess = () => {\n      ButterToast.raise({\n        content: /*#__PURE__*/React.createElement(Cinnamon.Crisp, {\n          title: \"Post Box\",\n          content: \"Submitted successfully\",\n          scheme: Cinnamon.Crisp.SCHEME_PURPLE,\n          icon: /*#__PURE__*/React.createElement(AssignmentTurnedIn, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 18\n          }\n        })\n      });\n      resetForm();\n    };\n\n    if (validate()) {\n      if (props.currentId == 0) props.createPostMessage(values, onSuccess);else props.updatePostMessage(props.currentId, values, onSuccess);\n    }\n  }; // const startAppButton = () => {\n  //   browserHistory.push(\"/newText\")\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Title\",\n    fullWidth: true,\n    value: values.title,\n    onChange: handleInputChange\n  }, errors.title && {\n    error: true,\n    helperText: errors.title\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(TextField, Object.assign({\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    rows: 10,\n    value: values.message,\n    onChange: handleInputChange\n  }, errors.message && {\n    error: true,\n    helperText: errors.message\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    className: classes.postBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  postMessageList: state.postMessage.list\n});\n\nconst mapActionToProps = {\n  createPostMessage: actions.create,\n  updatePostMessage: actions.update\n};\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));","map":{"version":3,"sources":["D:/Projects/PAF/Text Manager/Project/text-manager-front-end/src/components/PostMessageForm.js"],"names":["React","useEffect","useState","TextField","withStyles","Button","useForm","connect","actions","ButterToast","Cinnamon","AssignmentTurnedIn","browserHistory","initialFieldValues","title","message","styles","theme","root","margin","spacing","form","display","flexWrap","justifyContent","postBtn","width","marginLeft","PostMessageForm","classes","props","currentId","setValues","postMessageList","find","x","_id","setErrors","validate","temp","errors","values","Object","every","handleInputChange","resetForm","setCurrentId","handleSubmit","e","preventDefault","onSuccess","raise","content","Crisp","SCHEME_PURPLE","createPostMessage","updatePostMessage","error","helperText","mapStateToProps","state","postMessage","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { TextField, withStyles, Button } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/postMessage\";\r\nimport ButterToast, { Cinnamon } from \"butter-toast\";\r\nimport { AssignmentTurnedIn } from \"@material-ui/icons\";\r\nimport { browserHistory } from \"react-router\";\r\n\r\nconst initialFieldValues = {\r\n  title: '',\r\n  message: ''\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1)\r\n    },\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center'\r\n  },\r\n  postBtn: {\r\n    width: \"15%\",\r\n    marginLeft: theme.spacing(10)\r\n  }\r\n})\r\n\r\nconst PostMessageForm = ({ classes, ...props }) => {\r\n\r\n  useEffect(() => {\r\n    if (props.currentId != 0) {\r\n      setValues({\r\n        ...props.postMessageList.find(x => x._id == props.currentId)\r\n      })\r\n      setErrors({})\r\n    }\r\n  }, [props.currentId])\r\n\r\n  const validate = () => {\r\n    let temp = { ...errors }\r\n    temp.title = values.title ? \"\" : \"This field is required.\"\r\n    temp.message = values.message ? \"\" : \"This field is required.\"\r\n    setErrors({\r\n      ...temp\r\n    })\r\n    return Object.values(temp).every(x => x == \"\")\r\n  }\r\n\r\n  var {\r\n    values,\r\n    setValues,\r\n    errors,\r\n    setErrors,\r\n    handleInputChange,\r\n    resetForm\r\n  } = useForm(initialFieldValues, props.setCurrentId)\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault()\r\n    const onSuccess = () => {\r\n      ButterToast.raise({\r\n        content: <Cinnamon.Crisp title=\"Post Box\"\r\n          content=\"Submitted successfully\"\r\n          scheme={Cinnamon.Crisp.SCHEME_PURPLE}\r\n          icon={<AssignmentTurnedIn />}\r\n        />\r\n      })\r\n      resetForm()\r\n    }\r\n    if (validate()) {\r\n      if (props.currentId == 0)\r\n        props.createPostMessage(values, onSuccess)\r\n      else\r\n        props.updatePostMessage(props.currentId, values, onSuccess)\r\n    }\r\n  }\r\n\r\n  // const startAppButton = () => {\r\n  //   browserHistory.push(\"/newText\")\r\n  // }\r\n\r\n  return (\r\n    <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n      <TextField\r\n        name=\"title\"\r\n        variant=\"outlined\"\r\n        label=\"Title\"\r\n        fullWidth\r\n        value={values.title}\r\n        onChange={handleInputChange}\r\n        {...(errors.title && { error: true, helperText: errors.title })}\r\n      />\r\n      <TextField\r\n        name=\"message\"\r\n        variant=\"outlined\"\r\n        label=\"Message\"\r\n        fullWidth\r\n        multiline\r\n        rows={10}\r\n        value={values.message}\r\n        onChange={handleInputChange}\r\n        {...(errors.message && { error: true, helperText: errors.message })}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        className={classes.postBtn}\r\n      >Submit</Button>\r\n      <br />\r\n      {/* <Button\r\n        // variant=\"contained\"\r\n        // color=\"primary\"\r\n        // size=\"large\"\r\n        // type=\"submit\"\r\n        //className={classes.postBtn}\r\n        onClick={startAppButton}\r\n      >Submit</Button> */}\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  postMessageList: state.postMessage.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n  createPostMessage: actions.create,\r\n  updatePostMessage: actions.update\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(PostMessageForm));"]},"metadata":{},"sourceType":"module"}